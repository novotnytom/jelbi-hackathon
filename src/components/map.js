import React, { Component } from 'react'
import L from 'leaflet'
import PolylineUtil from 'polyline-encoded'
import { latlngTrans } from './helper/latlng_trans'
import { getDistance } from './helper/getDistance'
import { indexOfSmallest } from './helper/indexOfSmallest'
delete L.Icon.Default.prototype._getIconUrl;

L.Icon.Default.mergeOptions({
  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),
  iconUrl: require('leaflet/dist/images/marker-icon.png'),
  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),
});




// using the reduced.day map styles, have a look at the imported hereTileLayers for more ck2umk6l66cuf1cqjhcpjn1cs cjy8iy79j00xl1coa6pi7p86h ck2z1gnh40iq61cn1j0gcvmld
const pointsLayer = L.featureGroup();
const buslineLayer = L.featureGroup();
const routeLayer = L.featureGroup();
const mainmapLayer = L.tileLayer('https://api.mapbox.com/styles/v1/novott15/ck2z1gnh40iq61cn1j0gcvmld/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1Ijoibm92b3R0MTUiLCJhIjoiY2p5OGV3d2k3MDV6cDNpbG12dXozYXBiMSJ9.bcT8wF20VPA8gg3g-HS8MQ', {
  maxZoom: 20, 
    minZoom: 2,
    attribution: 'Yellow Lines = Bus Lines',
})

// we define our bounds of the map
const southWest = L.latLng(-90, -180),
  northEast = L.latLng(90, 180),
  bounds = L.latLngBounds(southWest, northEast)

// a leaflet map consumes parameters, I'd say they are quite self-explanatory
const mapParams = {
  center: [52.505, 13.36],
  zoomControl: false,
  maxBounds: bounds,
  zoom: 12,
  layers: [mainmapLayer, pointsLayer, buslineLayer, routeLayer]
}

// data with buslines
const data = {
    content: {
      busslines: [
        {
          key: "0",
          city: "Kudamm",        
          gps: [[52.49686496762393,13.289508819580078],[52.49702172975959,13.290538787841797],[52.497335252354226,13.291740417480469],[52.49741363265356,13.292555809020996],[52.49775327900285,13.294315338134766],[52.497988417246155,13.29616069793701],[52.498275806724706,13.297619819641113],[52.49851094217355,13.2989501953125],[52.498798328236674,13.30019474029541],[52.49911183816312,13.301954269409178],[52.49945147139404,13.303928375244139],[52.49971272594018,13.305516242980957],[52.500000104147865,13.30718994140625],[52.50023523037514,13.309078216552734],[52.50039198049472,13.310751914978026],[52.50049648026393,13.312039375305176],[52.50062710462618,13.313155174255371],[52.50096672615167,13.314957618713379],[52.501201847209316,13.316802978515625],[52.50167208555223,13.319377899169922],[52.50201169900509,13.321952819824219],[52.502560299809886,13.325257301330566],[52.503030523622186,13.327445983886719],[52.503448496121706,13.329377174377441],[52.50384034173069,13.33139419555664],[52.50415381570299,13.332939147949219],[52.50444116488051,13.334226608276367],[52.50446728743988,13.335256576538086],[52.50438891971523,13.33611488342285],[52.50373584990983,13.337874412536621],[52.50305664701985,13.3394193649292],[52.50261254714852,13.340620994567871],[52.50203782300817,13.342294692993164],[52.50156758857737,13.342938423156737],[52.50156758857737,13.343882560729979],[52.50114959819405,13.345899581909178],[52.50112347366314,13.3463716506958],[52.50088835218635,13.347015380859375],[52.500731603836535,13.348217010498047],[52.50031360550477,13.349847793579102],[52.50010460484857,13.351306915283203],[52.499477596918496,13.352980613708496],[52.49924246663935,13.354225158691406],[52.49926859228803,13.355426788330078],[52.49885058004633,13.357272148132324],[52.49835418534738,13.35963249206543],[52.49775327900285,13.362078666687012],[52.49738750590266,13.36413860321045],[52.49704785672787,13.36534023284912],[52.49602889346126,13.365769386291504],[52.49514054724429,13.366241455078123],[52.49438282599467,13.365983963012695],[52.49365122067485,13.365468978881836]],        
        },
        {
            key: "1",
            city: "Leipziger",        
            gps: [[52.47857221537497,13.344311714172363],[52.479356346514095,13.344912528991697],[52.479748406843136,13.345685005187988],[52.480454106631385,13.346586227416992],[52.48100297641872,13.347315788269043],[52.4815779755182,13.348088264465332],[52.481865472249766,13.348302841186523],[52.482492731324555,13.349289894104004],[52.48296316976145,13.350105285644531],[52.48345973820932,13.350920677185059],[52.483982435783204,13.3518648147583],[52.484452858289536,13.35289478302002],[52.48460966467371,13.353195190429688],[52.48497554406308,13.354053497314453],[52.485498223625996,13.355083465576172],[52.48602089697828,13.356070518493652],[52.4862560979606,13.356542587280272],[52.486543564119955,13.356714248657227],[52.48680489536184,13.357100486755371],[52.48727528768459,13.357443809509277],[52.48785020480303,13.358001708984375],[52.48842511440679,13.358430862426756],[52.488608038613876,13.35855960845947],[52.48889548940225,13.35886001586914],[52.489287464722445,13.359289169311523],[52.48981009304863,13.359718322753906],[52.49035884610717,13.360147476196289],[52.49075080838561,13.360576629638672],[52.49106437569315,13.360748291015625],[52.491325680074944,13.360791206359863],[52.49190054424985,13.360834121704102],[52.492501530580014,13.360834121704102],[52.49302412071288,13.360962867736816],[52.493625091688315,13.360962867736816],[52.49425218308027,13.360962867736816],[52.49446121155701,13.361005783081055],[52.49506216289293,13.36113452911377],[52.49587212778589,13.361155986785889],[52.49649918713391,13.361477851867674],[52.49720461821149,13.361735343933105],[52.49774021573024,13.362014293670654],[52.49802760683111,13.362035751342773],[52.49881139119489,13.362379074096678],[52.49969966324974,13.362743854522705],[52.50001316674902,13.363001346588135],[52.500470355344916,13.363344669342041],[52.50078385334855,13.363645076751709],[52.501619837095845,13.364417552947998],[52.50229906218524,13.364975452423096],[52.503135017119625,13.365662097930908],[52.50387952609948,13.36634874343872],[52.50448034871372,13.367013931274414],[52.505094224207355,13.367722034454344],[52.50568196930601,13.368194103240967],[52.50586482173388,13.368322849273682],[52.50624358505761,13.36860179901123],[52.50673989067938,13.36888074874878],[52.507301492913875,13.369052410125732],[52.50781084687457,13.36937427520752],[52.50832019493252,13.369717597961426],[52.5084899763068,13.369910717010498],[52.508816477106244,13.370661735534668],[52.5089601366896,13.370962142944336],[52.50903849626442,13.37184190750122],[52.5091429754802,13.373043537139893],[52.509260514301054,13.374180793762207],[52.509312753676085,13.375425338745117],[52.50939111262222,13.376498222351074],[52.509495590999734,13.377506732940672],[52.509560889859564,13.378429412841797],[52.509665367833506,13.379437923431395],[52.50974372615093,13.380553722381592],[52.509809024642095,13.381326198577879],[52.509887382703425,13.382570743560791],[52.51001797916183,13.384265899658203],[52.51007021763652,13.385274410247801],[52.51013551564258,13.386368751525879],[52.510200813551634,13.38735580444336],[52.51029223046129,13.388729095458983],[52.5103575281375,13.389909267425537],[52.51039670669663,13.390960693359375],[52.51046200421761,13.391883373260498],[52.51052730164155,13.392205238342285],[52.51071013391247,13.392806053161621],[52.51071013391247,13.393964767456055],[52.51081460915434,13.395273685455322],[52.51082766854211,13.396368026733398],[52.51097132155147,13.397655487060547],[52.5110496775405,13.398749828338623],[52.51110191478889,13.39982271194458],[52.51120638909939,13.400723934173584],[52.511284744669304,13.401217460632324],[52.51137615932425,13.401668071746826],[52.51167652042317,13.402247428894043],[52.511885466063816,13.402526378631592],[52.51230335436472,13.403213024139404],[52.51261676798259,13.403728008270264],[52.51320441249142,13.404500484466553],[52.51355699542472,13.405165672302246],[52.514040160034966,13.405745029449461],[52.51452331933267,13.406367301940918],[52.515110938345885,13.40705394744873],[52.51552879597441,13.407526016235352],[52.51607722808149,13.408169746398924],[52.51631226831761,13.40855598449707]],        
        },  
        {
            key: "2",
            city: "Friedrichsstrasse",        
            gps: [[52.51716101425811,13.388814926147461],[52.518022801053135,13.388621807098389],[52.51875400083567,13.388557434082031],[52.51988994778821,13.38832139968872],[52.520255533663416,13.38827848434448],[52.52109114709722,13.388192653656004],[52.52177007130904,13.388063907623291],[52.522475096885096,13.387892246246338],[52.5234020577385,13.387763500213623],[52.52388511409244,13.387613296508789],[52.5244595525717,13.38759183883667],[52.52512536959099,13.387441635131836],[52.52622198738677,13.387291431427],[52.52713581463586,13.38709831237793],[52.527357741241296,13.38832139968872],[52.52756661231615,13.389158248901367],[52.52781464542741,13.390381336212158],[52.52801046005216,13.391368389129639],[52.52825849065687,13.392484188079834],[52.528545682238736,13.393900394439697],[52.52881981790592,13.394994735717773],[52.52900257406677,13.395767211914062],[52.529433353436936,13.39759111404419],[52.52956389180582,13.399651050567627],[52.52962916084474,13.40132474899292],[52.52983802111749,13.402934074401855],[52.52983802111749,13.403620719909668],[52.52958999943304,13.405337333679197],[52.529224491239695,13.407161235809326],[52.52904173600233,13.408277034759521],[52.528741493604194,13.409628868103027],[52.528715385472566,13.410015106201172],[52.5284673574481,13.41130256652832],[52.52827154486041,13.41205358505249],[52.52791908000258,13.413233757019043],[52.52752744906527,13.414692878723145],[52.52697915988631,13.415701389312744]],        
        },  
        {
            key: "3",
            city: "MartinLuther",        
            gps: [[52.48259727363417,13.346757888793944],[52.48411310920625,13.345513343811035],[52.484635799016736,13.345041275024414],[52.48565502628379,13.345041275024414],[52.48688329443164,13.345041275024414],[52.48790246962299,13.344998359680176],[52.489104543341085,13.345041275024414],[52.49033271516442,13.345084190368652],[52.491273419322816,13.344955444335938],[52.49226636299416,13.344955444335938],[52.49349444652272,13.345212936401367],[52.49438282599467,13.345899581909178],[52.495088291025574,13.34615707397461],[52.4960027658875,13.346028327941895],[52.49715236444572,13.346028327941895],[52.49887670592785,13.345985412597656],[52.50020910530087,13.345985412597656],[52.50086222750018,13.34662914276123],[52.501254096162484,13.34740161895752],[52.50201169900509,13.348517417907715],[52.50249499054926,13.349525928497314],[52.50309583208719,13.350062370300293],[52.50436279710928,13.351113796234129],[52.50517259067456,13.351929187774658],[52.50556442091497,13.352208137512207],[52.505982369321565,13.352336883544922],[52.5064264351492,13.352186679840086],[52.50805899153759,13.351821899414062],[52.50960006912891,13.351328372955322],[52.511911584199034,13.35087776184082],[52.51384428313059,13.350319862365723],[52.5141054521424,13.35087776184082],[52.514366619602,13.351221084594727],[52.514784484308684,13.351178169250488],[52.51509788023094,13.350920677185059],[52.515646317716474,13.351521492004395],[52.51595970749194,13.352336883544922],[52.51627309503224,13.353281021118164],[52.51666482631435,13.354096412658691],[52.51710878421212,13.354482650756836],[52.51703043902672,13.355040550231934],[52.51691292098668,13.35587739944458],[52.516860690645764,13.356692790985107],[52.51689986340726,13.357722759246826],[52.51704349656731,13.35862398147583],[52.51726547416385,13.359503746032713],[52.51752662284164,13.360748291015625],[52.51763108187812,13.361499309539795],[52.51767025395278,13.362808227539062],[52.51756579500942,13.364267349243164],[52.5174613358177,13.365983963012695],[52.517409106128696,13.367056846618652],[52.51730464656447,13.369073867797852],[52.51778776996722,13.369889259338379],[52.51778776996722,13.370790481567383]],        
        }, 
        {
            key: "4",
            city: "Urbanstrasse",        
            gps: [[52.48168252000161,13.440141677856445],[52.48288476370466,13.43803882598877],[52.48385176197198,13.435721397399902],[52.484923275765226,13.433532714843748],[52.48515848261656,13.432674407958984],[52.48562889254632,13.431429862976074],[52.4860731639719,13.429970741271973],[52.48651743091039,13.428897857666016],[52.48688329443164,13.42778205871582],[52.48730142044389,13.426709175109862],[52.48787633722077,13.425250053405762],[52.48902614823047,13.42203140258789],[52.489993011495585,13.41954231262207],[52.49090759231886,13.41602325439453],[52.49190054424985,13.41301918029785],[52.49205732408431,13.412461280822754],[52.49294573258882,13.4088134765625],[52.493416059237056,13.405895233154297],[52.49386025200826,13.403449058532715],[52.493964767302344,13.40280532836914],[52.49443508305176,13.399972915649414],[52.494591853850416,13.398900032043457],[52.495271187519414,13.397655487060547],[52.496081148562176,13.395981788635254],[52.496211786042764,13.395123481750488],[52.496917221731266,13.395295143127441],[52.4976487727133,13.395509719848631],[52.49796229083676,13.395724296569824],[52.498275806724706,13.3958101272583],[52.499033460891084,13.395767211914062],[52.49997397893388,13.395123481750488],[52.50109734911672,13.394479751586914],[52.50188107875677,13.3943510055542],[52.502638670794546,13.394780158996582],[52.5032395103687,13.395380973815918],[52.50412769295735,13.395981788635254],[52.504885246278384,13.39653968811035],[52.50535544522142,13.397054672241211],[52.50616522049978,13.397483825683592],[52.507027222951635,13.398127555847168]],        
        }, 
        {
            key: "5",
            city: "OttoSuhr",        
            gps: [[52.53037322103258,13.295860290527344],[52.529224491239695,13.296332359313965],[52.528441249153516,13.296675682067871],[52.52718803276156,13.297104835510252],[52.52640475435762,13.297362327575684],[52.52549091189833,13.297619819641113],[52.524185389689116,13.29822063446045],[52.5234020577385,13.299078941345213],[52.52248815280757,13.30045223236084],[52.52126087913385,13.299851417541504],[52.520764737491305,13.299422264099121],[52.519615756385335,13.299593925476074],[52.518962912824115,13.301224708557129],[52.518701772683336,13.302383422851562],[52.51804891554064,13.304443359375],[52.51744827840128,13.306717872619629],[52.51676928739977,13.308649063110352],[52.516116401541495,13.310580253601074],[52.51520234504166,13.313584327697754],[52.51457555245206,13.315343856811523],[52.51394875092156,13.317317962646484],[52.513765932124336,13.31866979598999],[52.5136353468035,13.31965684890747],[52.51345252670237,13.320515155792236],[52.513073825501905,13.321287631988525],[52.5125775914026,13.321824073791504],[52.51195076137277,13.322210311889648],[52.51132392240183,13.32287549972534],[52.51089296542278,13.323411941528319],[52.51039670669663,13.324227333068848],[52.509665367833506,13.32515001296997],[52.509195214994925,13.32590103149414],[52.50875117714037,13.326802253723145],[52.508202653596896,13.328025341033936],[52.50805899153759,13.328454494476318],[52.507301492913875,13.329956531524658],[52.50664846638063,13.331329822540283],[52.50620440279615,13.332359790802002],[52.50544687220962,13.333840370178223],[52.505211773855784,13.335771560668945],[52.50505504092133,13.337852954864502],[52.50536850623138,13.339955806732178],[52.50517259067456,13.341307640075684],[52.5048460628061,13.342337608337402],[52.50470238977553,13.342938423156737],[52.50437585841419,13.344311714172363]],        
        },  
      ]
    }
  };



export default class Map extends Component {
    constructor(props) {
        super(props);
        this.state = {            
            markers: [],            
            addMarker: false,
            busLinePointIn: [],   
            busLinePointOut: [], 
            resultRoute: [],         
        };       
      }

  // and once the component has mounted we add everything to it
  componentDidMount() {        
    // our map!
    this.map = L.map('map', mapParams);
    this.map.on('click', this.addMarkers);
    this.showBuslines();  
  }

  // when sth happens, it will be shown in the map
  componentDidUpdate(prevProps, prevState) {
    this.refreshPoints();
    this.showRoute();
  }


  //API call route
  getRouteNew = (startLan, startLng, busLineInLan, busLineInLng, busLineOutLan, busLineOutLng, targetLan, targetLng) => {

    // ORS Directions
    var openrouteservice = require('openrouteservice-js');
    var Directions1 = new openrouteservice.Directions({
        api_key: "5b3ce3597851110001cf62485f68b3dd8c494731afc5648627e19931"
    });

    // Input Params
    let params = {
        'coordinates': [[startLng,startLan],[busLineInLng,busLineInLan],[busLineOutLng,busLineOutLan],[targetLng,targetLan]],
        'format': 'json',
        'profile': 'driving-car',
        'preference': 'fastest',
        'instructions': 'false',
        'geometry': 'true',        
      };
            
      Directions1.calculate(params)      
      .then(json => this.setState({resultRoute: json.routes[0].geometry, resultTime1: json.routes[0].summary.duration}))
      .catch(err => console.log("An error occured: "+ err));

  }


  //----
  //---- function definiton for map component
  //----

  //show buslines
  showBuslines = () => {
    data.content.busslines.map((busline, i) => {
        L.polyline(busline.gps, {color: '#dac003', weight: 8, opacity: 0.45}).addTo(buslineLayer);
        
    }); 
  }

  //show route
  showRoute = () => {
    // clear the markers layer beforehand
    routeLayer.clearLayers();  
    
    if (this.state.resultRoute){

        // clear the markers layer beforehand
        routeLayer.clearLayers();
        
        let encoded = this.state.resultRoute;
        let decoded = L.polyline(L.PolylineUtil.decode(encoded, 5)).getLatLngs();


        L.polyline(decoded, {color: 'black', weight: 6, opacity: 1}).addTo(routeLayer);           
    }
  }

  //show or hide the points in the map
  refreshPoints(){            
    // clear the markers layer beforehand
    pointsLayer.clearLayers();

    this.state.markers.map((marker, i) => {
        L.circleMarker(marker, {color: 'black', opacity: 0.9}).addTo(pointsLayer)
    });  
    
    if (this.state.busLinePointIn.length >= 1){
        console.log(this.state);
        L.circleMarker(this.state.busLinePointIn, {color: 'black', opacity: 0.95, radius: 4}).addTo(pointsLayer);
        L.circleMarker(this.state.busLinePointOut, {color: 'black', opacity: 0.95, radius: 4}).addTo(pointsLayer);
    }
  }


  //----
  //---- Action handler, fired by button clicks
  //----


  //activate marker adding, and by clicking on the map, add the marker
  handleActivateMarkers = () => {
    if (this.state.markers.length <= 1) {
        this.setState({ activeBtn: true });
    } else {
        this.setState({ activeBtn: false });
    }
  };

  //adding new marker by clicking on the map
  addMarkers = (e) => {
    if (this.state.activeBtn) {
            const { markers } = this.state;              
            markers.push(e.latlng);              
            this.setState({ markers }, () => {
                console.log(this.state.markers);
            });              
            
            this.setState({ activeBtn: false })   
    } else {
        return;          
    }  
  };

  //clear markers from the map
  handleClearMarkers = () => {
    this.setState({ markers : [], busLinePointIn: [], busLinePointOut: [], resultRoute: [] });
     
  };


  handleTestBusline = () => {

  //stay always static
  let startLat = this.state.markers[0].lat;
  let startLng = this.state.markers[0].lng;
  let targetLat = this.state.markers[1].lat;
  let targetLng = this.state.markers[1].lng;

  //nr of bussspurs
  let i_buslines = data.content.busslines.length;

  //test every busspur for nearest points, save as code for 
  let distBusPointIn=[];
  let distBusPointOut=[];
  let keyBusPointIn=[];
  let keyBusPointOut=[];
  for (let i=0; i <= i_buslines-1; i++) {
    distBusPointIn[i] = data.content.busslines[i].gps.map((target, i) => {          
        return getDistance(startLat, startLng, target[0], target[1]);
      });
    keyBusPointIn[i] = indexOfSmallest(distBusPointIn[i]);
    distBusPointOut[i] = data.content.busslines[i].gps.map((target, i) => {          
        return getDistance(targetLat, targetLng, target[0], target[1]);
      });    
    keyBusPointOut[i] = indexOfSmallest(distBusPointOut[i]);
  }

  //chose the busline based on In point (startof) that is nearest to Busline
  let decodeBusLine=[];
  for  (let i=0; i <= i_buslines-1; i++) {
    decodeBusLine[i] = distBusPointIn[i][keyBusPointIn[i]];
  }
  decodeBusLine = indexOfSmallest(decodeBusLine);


  //specify the Waypoints for API call to Routeplanning:
  let PointIn = data.content.busslines[decodeBusLine].gps[keyBusPointIn[decodeBusLine]];
  let PointOut = data.content.busslines[decodeBusLine].gps[keyBusPointOut[decodeBusLine]];

  this.setState({ busLinePointIn: PointIn, busLinePointOut: PointOut }); 
  
  this.getRouteNew(startLat, startLng, PointIn[0], PointIn[1], PointOut[0], PointOut[1], targetLat, targetLng);

  console.log(this.state);


}


  

  
        

    render() {
        return (
            <div>
            
            <div className="map-wrapper">

            <div className="map-editor"> 

            {this.state.resultRoute.length > 0 ? null :
            <button className="button-edit"
                onClick={this.handleActivateMarkers}
                >
                Pick your Trip (A -> B)
            </button>  
            }
            
            {this.state.resultRoute.length > 0 ? 
            <button className="button-edit" 
                onClick={this.handleClearMarkers}
                >
                Clear
            </button>
            :
            null
            }             

            </div>

            <div id="map" className="map-box">
                <a href="http://mapbox.com/about/maps" className='mapbox-wordmark' target="_blank">Mapbox</a>         
            </div>               

            </div>

               

            {this.state.resultRoute.length > 0 ? 
            <div>
            <h2>Bingo, there is a bus line to drive!</h2> 
            <p>You Ride will take just about {(this.state.resultTime1/60).toFixed(2)} min.</p>
            </div>
            :   
            <button className="button-check"
                onClick={this.handleTestBusline}
                >
                Enjoy the fast line ->>>
            </button>
            }

            </div>
        )
    }
}
